import { pgTable, text, integer, varchar, boolean, jsonb, timestamp, json, real } from "drizzle-orm/pg-core";
import { relations } from 'drizzle-orm';
import { sql } from 'drizzle-orm';

export const MockInterview = pgTable('mockInterview', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  jobDetailsId: integer('jobDetailsId'),
  jsonMockResp: varchar('jsonMockResp').notNull(),
  jobPosition: varchar('jobPosition').notNull(),
  jobDesc: varchar('jobDesc').notNull(),
  jobExperience: varchar('jobExperience').notNull(),
  category: varchar('category', { length: 100 }),
  createdBy: varchar('createdBy').notNull(),
  createdAt: varchar('createdAt'),
  mockId: varchar('mockId').notNull(),
  jobRes: varchar('jobRes'),
  jobReq: varchar('jobReq'),
  perfSkills: varchar('perfSkills'),
  careerLevel: varchar('careerLevel'),
  skills: varchar('skills'),
  education: varchar('education'),
  achievements: varchar('achievements'),
  projects: varchar('projects'),
  interviewType: varchar('interviewType'),
  isHidden: boolean('isHidden').default(false),
});

export const UserAnswer = pgTable('userAnswer', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  mockIdRef: varchar('mockId').notNull(),
  question: varchar('question').notNull(),
  correctAns: text('correctAns'),
  userAns: text('userAns'),
  feedback: text('feedback'),
  rating: varchar('rating'),
  suggestions: text('suggestions'), 
  userEmail: varchar('userEmail'),
  createdAt: varchar('createdAt'),
  needsFollowUp: boolean('needsFollowUp').default(false), 
  reason: text('reason'),
  suggestedFollowUp: varchar('suggestedFollowUp'),
  interview_type: varchar('interview_type'),
  audioRecording: text('audioRecording'),
  language: varchar('language'),
  detailedEvaluation: jsonb('detailedEvaluation'),
  evaluationScore: real('evaluationScore'),
  detailedScores: jsonb('detailedScores'),
  combinedScore: varchar('combinedScore'),
  overallAssessment: text('overallAssessment'),
  sessionId: varchar('sessionId'),
  questionIndex: integer('questionIndex'),
  isAnswered: boolean('isAnswered').default(false),
  isSkipped: boolean('isSkipped').default(false),
  retryCount: integer('retryCount').default(0),
  lastAttemptAt: timestamp('lastAttemptAt').defaultNow(),
  updatedAt: timestamp('updatedAt').defaultNow()
});

export const callInterview = pgTable('CallInterview', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  jobDetailsId: integer('jobDetailsId'),
  jobPosition: varchar('jobPosition', { length: 255 }),
  jobDescription: varchar('jobDescription', { length: 255 }),
  duration: varchar('duration', { length: 100 }),
  type: varchar('type', { length: 100 }),
  category: varchar('category', { length: 100 }),
  questionList: jsonb('questionList'),
  recruiterName: varchar('recruiterName', { length: 255 }),
  recruiterEmail: varchar('recruiterEmail', { length: 255 }),
  job_id: varchar('job_id', { length: 255 }).unique(),
  createdAt: timestamp('createdAt').defaultNow(),
});

export const callInterviewFeedback = pgTable('CallInterviewFeedback', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  userName: varchar('userName', { length: 255 }).notNull(),
  userEmail: varchar('userEmail', { length: 255 }).notNull(),
  job_id: varchar('job_id', { length: 255 }).notNull().references(() => callInterview.job_id),
  feedback: json('feedback').notNull(),
  recommended: boolean('recommended').notNull()
});

export const callInterviewRelations = relations(callInterview, ({ many }) => ({
  feedback: many(callInterviewFeedback),
}));

export const callInterviewFeedbackRelations = relations(callInterviewFeedback, ({ one }) => ({
  interview: one(callInterview, {
    fields: [callInterviewFeedback.job_id],
    references: [callInterview.job_id],
  }),
}));

export const JobDetails = pgTable('JobDetails', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  jobTitle: varchar('jobTitle', { length: 255 }),
  jobCategories: varchar('jobCategories', { length: 255 }).array(),
  jobTypes: varchar('jobTypes', { length: 255 }).array(),
  workplace: varchar('workplace', { length: 100 }),
  country: varchar('country', { length: 100 }),
  city: varchar('city', { length: 100 }),
  careerLevel: varchar('careerLevel', { length: 100 }),
  minExperience: integer('minExperience'),
  maxExperience: integer('maxExperience'),
  minSalary: integer('minSalary'),
  maxSalary: integer('maxSalary'),
  currency: varchar('currency', { length: 20 }),
  period: varchar('period', { length: 20 }),
  hideSalary: boolean('hideSalary'),
  additionalSalary: varchar('additionalSalary', { length: 255 }),
  vacancies: integer('vacancies'),
  jobDescription: text('jobDescription'),
  jobRequirements: text('jobRequirements'),
  skills: varchar('skills', { length: 255 }),
  gender: varchar('gender', { length: 50 }),
  education: varchar('education', { length: 100 }),
  academicExcellence: boolean('academicExcellence'),
  createdAt: timestamp('createdAt').defaultNow(),
});

export const UserProfile = pgTable('UserProfile', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  userId: varchar('userId', { length: 255 }).notNull().unique(),
  email: varchar('email', { length: 255 }).notNull().unique(),
  name: varchar('name', { length: 255 }),
  phone: varchar('phone', { length: 50 }),
  profilePhoto: varchar('profilePhoto', { length: 500 }),
  currentPosition: varchar('currentPosition', { length: 255 }),
  currentCompany: varchar('currentCompany', { length: 255 }),
  location: varchar('location', { length: 255 }),
  summary: text('summary'),
  skills: varchar('skills', { length: 255 }).array(),
  languages: varchar('languages', { length: 100 }).array(),
  certifications: varchar('certifications', { length: 255 }).array(),
  education: jsonb('education'),
  experience: jsonb('experience'),
  cvAnalysisId: integer('cvAnalysisId').references(() => CVAnalysis.id),
  isProfileComplete: boolean('isProfileComplete').default(false),
  createdAt: timestamp('createdAt').defaultNow(),
  updatedAt: timestamp('updatedAt').defaultNow(),
});

export const CVAnalysis = pgTable('CVAnalysis', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  userId: varchar('userId', { length: 255 }).notNull(),
  originalFileName: varchar('originalFileName', { length: 255 }),
  extractedText: text('extractedText'),
  parsedData: jsonb('parsedData').notNull(),
  feedback: text('feedback'),
  analysisStatus: varchar('analysisStatus', { length: 50 }).default('completed'),
  createdAt: timestamp('createdAt').defaultNow(),
});

export const JobRecommendation = pgTable('JobRecommendation', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  userId: varchar('userId', { length: 255 }).notNull(),
  jobDetailsId: integer('jobDetailsId').notNull().references(() => JobDetails.id),
  matchScore: integer('matchScore'),
  recommendationReason: text('recommendationReason'),
  isViewed: boolean('isViewed').default(false),
  isApplied: boolean('isApplied').default(false),
  createdAt: timestamp('createdAt').defaultNow(),
});

export const userProfileRelations = relations(UserProfile, ({ one }) => ({
  cvAnalysis: one(CVAnalysis, {
    fields: [UserProfile.cvAnalysisId],
    references: [CVAnalysis.id],
  }),
}));

export const cvAnalysisRelations = relations(CVAnalysis, ({ one }) => ({
  userProfile: one(UserProfile, {
    fields: [CVAnalysis.userId],
    references: [UserProfile.userId],
  }),
}));

export const jobRecommendationRelations = relations(JobRecommendation, ({ one }) => ({
  jobDetails: one(JobDetails, {
    fields: [JobRecommendation.jobDetailsId],
    references: [JobDetails.id],
  }),
  userProfile: one(UserProfile, {
    fields: [JobRecommendation.userId],
    references: [UserProfile.userId],
  }),
}));

// Session-level cheating detection table
export const SessionCheatingDetection = pgTable('sessionCheatingDetection', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  sessionId: varchar('sessionId').notNull(),
  mockId: varchar('mockId').notNull(),
  userEmail: varchar('userEmail'),
  sessionStartTime: timestamp('sessionStartTime').notNull(),
  sessionEndTime: timestamp('sessionEndTime'),
  sessionDuration: integer('sessionDuration').default(0),
  sessionCheatingDetection: jsonb('sessionCheatingDetection'),
  sessionCheatingRiskScore: integer('sessionCheatingRiskScore').default(0),
  sessionCheatingAlertsCount: integer('sessionCheatingAlertsCount').default(0),
  sessionCheatingSeverityLevel: varchar('sessionCheatingSeverityLevel', { length: 20 }).default('low'),
  sessionCheatingViolations: jsonb('sessionCheatingViolations'),
  sessionCheatingDevices: jsonb('sessionCheatingDevices'),
  sessionCheatingMovementPatterns: jsonb('sessionCheatingMovementPatterns'),
  sessionDetectionHistory: jsonb('sessionDetectionHistory'),
  sessionAlerts: jsonb('sessionAlerts'),
  sessionEnhancedMetrics: jsonb('sessionEnhancedMetrics'),
  sessionDetectionSettings: jsonb('sessionDetectionSettings'),
  createdAt: timestamp('createdAt').defaultNow(),
  updatedAt: timestamp('updatedAt').defaultNow(),
});

// Friend connections between users
export const UserConnections = pgTable('UserConnections', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  requesterId: varchar('requesterId', { length: 255 }).notNull(),
  recipientId: varchar('recipientId', { length: 255 }).notNull(),
  status: varchar('status', { length: 20 }).default('pending'), // pending, accepted, rejected, blocked
  createdAt: timestamp('createdAt').defaultNow(),
  updatedAt: timestamp('updatedAt').defaultNow(),
});

// Chat conversations
export const ChatConversations = pgTable('ChatConversations', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  conversationId: varchar('conversationId', { length: 255 }).notNull().unique(),
  participant1Id: varchar('participant1Id', { length: 255 }).notNull(),
  participant2Id: varchar('participant2Id', { length: 255 }).notNull(),
  lastMessageAt: timestamp('lastMessageAt').defaultNow(),
  createdAt: timestamp('createdAt').defaultNow(),
  updatedAt: timestamp('updatedAt').defaultNow(),
});

// Chat messages
export const ChatMessages = pgTable('ChatMessages', {
  id: integer('id').primaryKey().notNull().default(sql`GENERATED BY DEFAULT AS IDENTITY`),
  conversationId: varchar('conversationId', { length: 255 }).notNull(),
  senderId: varchar('senderId', { length: 255 }).notNull(),
  message: text('message').notNull(),
  messageType: varchar('messageType', { length: 20 }).default('text'), // text, image, file
  isRead: boolean('isRead').default(false),
  createdAt: timestamp('createdAt').defaultNow(),
});

// Relations for chat functionality (temporarily disabled for testing)
// export const userConnectionsRelations = relations(UserConnections, ({ one }) => ({
//   requester: one(UserProfile, {
//     fields: [UserConnections.requesterId],
//     references: [UserProfile.userId],
//   }),
//   recipient: one(UserProfile, {
//     fields: [UserConnections.recipientId],
//     references: [UserProfile.userId],
//   }),
// }));

// export const chatConversationsRelations = relations(ChatConversations, ({ one, many }) => ({
//   participant1: one(UserProfile, {
//     fields: [ChatConversations.participant1Id],
//     references: [UserProfile.userId],
//   }),
//   participant2: one(UserProfile, {
//     fields: [ChatConversations.participant2Id],
//     references: [UserProfile.userId],
//   }),
//   messages: many(ChatMessages),
// }));

// export const chatMessagesRelations = relations(ChatMessages, ({ one }) => ({
//   conversation: one(ChatConversations, {
//     fields: [ChatMessages.conversationId],
//     references: [ChatConversations.conversationId],
//   }),
//   sender: one(UserProfile, {
//     fields: [ChatMessages.senderId],
//     references: [UserProfile.userId],
//   }),
// }));
